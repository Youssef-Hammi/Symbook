security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Dedicated firewall for Stripe webhooks to bypass security (including CSRF)
        webhook:
            pattern: ^/webhook/stripe
            security: false
            stateless: true # Webhooks are stateless
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator:
                - App\Security\AuthAuthenticator
                - App\Security\GoogleAuthenticator
                - App\Security\FacebookAuthenticator
                - App\Security\GithubAuthenticator
            entry_point: App\Security\AuthAuthenticator
            logout:
                path: app_logout
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # Allow anonymous access to login and register
        - { path: ^/login }
        - { path: ^/register }
        # Allow anonymous access to the root path
        - { path: ^/$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Allow authenticated users access to the showcase and user areas
        - { path: ^/book/showcase, roles: IS_AUTHENTICATED }
        - { path: ^/cart, roles: IS_AUTHENTICATED }
        - { path: ^/order/history, roles: IS_AUTHENTICATED }
        # Restrict admin areas to ROLE_ADMIN
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/book/(?!showcase), roles: ROLE_ADMIN } # Restrict /book/* except /book/showcase
        - { path: ^/category, roles: ROLE_ADMIN }
        - { path: ^/user, roles: ROLE_ADMIN }
        - { path: ^/order/$, roles: ROLE_ADMIN } # Restrict /order/ index
        # Allow anonymous access for Stripe webhooks
        - { path: ^/webhook/stripe, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Route to initiate Google OAuth login handled by GoogleAuthenticator's start method
        - { path: ^/connect/google, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Route to initiate Facebook OAuth login handled by GoogleAuthenticator's start method
        - { path: ^/connect/facebook, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Route to initiate GitHub OAuth login handled by GoogleAuthenticator's start method
        - { path: ^/connect/github, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Default: require authentication for all other pages not explicitly allowed or restricted
        - { path: ^/, roles: IS_AUTHENTICATED }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
